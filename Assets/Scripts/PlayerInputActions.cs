//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Puzzle_AM"",
            ""id"": ""ab77d9d1-5d12-4314-ac43-123642a06477"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""12967076-2f85-4e71-9dd1-7ae2afdab838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Powerup"",
                    ""type"": ""Button"",
                    ""id"": ""b1fa68ff-a7d1-4a4a-89e6-062816064dc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52328583-0b47-4de8-aec8-70dab8924551"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90cb1cd5-4620-4679-aa30-158c09ed0cb5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Powerup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Puzzle_AM
        m_Puzzle_AM = asset.FindActionMap("Puzzle_AM", throwIfNotFound: true);
        m_Puzzle_AM_Rotate = m_Puzzle_AM.FindAction("Rotate", throwIfNotFound: true);
        m_Puzzle_AM_Powerup = m_Puzzle_AM.FindAction("Powerup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Puzzle_AM
    private readonly InputActionMap m_Puzzle_AM;
    private List<IPuzzle_AMActions> m_Puzzle_AMActionsCallbackInterfaces = new List<IPuzzle_AMActions>();
    private readonly InputAction m_Puzzle_AM_Rotate;
    private readonly InputAction m_Puzzle_AM_Powerup;
    public struct Puzzle_AMActions
    {
        private @PlayerInputActions m_Wrapper;
        public Puzzle_AMActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Puzzle_AM_Rotate;
        public InputAction @Powerup => m_Wrapper.m_Puzzle_AM_Powerup;
        public InputActionMap Get() { return m_Wrapper.m_Puzzle_AM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Puzzle_AMActions set) { return set.Get(); }
        public void AddCallbacks(IPuzzle_AMActions instance)
        {
            if (instance == null || m_Wrapper.m_Puzzle_AMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Puzzle_AMActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Powerup.started += instance.OnPowerup;
            @Powerup.performed += instance.OnPowerup;
            @Powerup.canceled += instance.OnPowerup;
        }

        private void UnregisterCallbacks(IPuzzle_AMActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Powerup.started -= instance.OnPowerup;
            @Powerup.performed -= instance.OnPowerup;
            @Powerup.canceled -= instance.OnPowerup;
        }

        public void RemoveCallbacks(IPuzzle_AMActions instance)
        {
            if (m_Wrapper.m_Puzzle_AMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPuzzle_AMActions instance)
        {
            foreach (var item in m_Wrapper.m_Puzzle_AMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Puzzle_AMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Puzzle_AMActions @Puzzle_AM => new Puzzle_AMActions(this);
    public interface IPuzzle_AMActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnPowerup(InputAction.CallbackContext context);
    }
}
